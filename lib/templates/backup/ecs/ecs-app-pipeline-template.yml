---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pipeline'
Parameters:
  
  GitHubUser:
    Type: String
    Description: GitHub User
    Default: "electronicbits"
  GitHubRepo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
    Default: "helloworld"
  GitHubBranch:
    Type: String
    Description: GitHub Branch
    Default: "master"
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Secret. 
    
Resources:

  # Private repository that stores Docker images
  ArtifactsRepository:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    DeletionPolicy: Retain
    Type: 'AWS::ECR::Repository'
    Properties: {}

  # S3 bucket to store artifacts used between deployment stages
  ArtifactsBucket:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    DeletionPolicy: Retain
    Type: 'AWS::S3::Bucket'
  
  # Docker needs a set of access rights to push images to the repository
  ImageCodeBuildRole:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codebuild.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action: 
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Sid: CodeCommitPolicy
            Effect: Allow
            Action: 'codecommit:GitPull'
            Resource: '*'
          - Sid: S3GetObjectPolicy
            Effect: Allow
            Action: 
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            Resource: '*'
          - Sid: S3PutObjectPolicy
            Effect: 'Allow'
            Action: 's3:PutObject'
            Resource: '*'
          - Sid: ECR
            Effect: 'Allow'
            Action: 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: ECRRepo
            Effect: 'Allow'
            Action:
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:CompleteLayerUpload'
            - 'ecr:InitiateLayerUpload'
            - 'ecr:PutImage'
            - 'ecr:UploadLayerPart'
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ArtifactsRepository}'
  
  PipelineRole:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codepipeline.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'

  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'cloudformation.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'

  CodeBuildRole:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'codebuild.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: ServiceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action: 
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Sid: CodeCommitPolicy
            Effect: Allow
            Action: 'codecommit:GitPull'
            Resource: '*'
          - Sid: S3GetObjectPolicy
            Effect: Allow
            Action: 
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            Resource: '*'
          - Sid: S3PutObjectPolicy
            Effect: 'Allow'
            Action: 's3:PutObject'
            Resource: '*'

  AppProject:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/nodejs:6.3.1'
        Type: 'LINUX_CONTAINER'
      Name: !Sub '${AWS::StackName}-app'
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
          
            post_build:
              commands:
              - npm install --production
          artifacts:
            files:
            - 'app/**/*'
            - 'Dockerfile' # this is a hack because we can not pass multiple Arifacts as an input to CodeBuild at the moment
      TimeoutInMinutes: 10

  # build the Docker image and publish the tag of the image as an artifact
  ImageProject:
    DependsOn: CloudFormationRole # make sure that CloudFormationRole is deleted last
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/docker:1.12.1'
        Type: 'LINUX_CONTAINER'
      Name: !Sub '${AWS::StackName}-image'
      ServiceRole: !GetAtt 'ImageCodeBuildRole.Arn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            build:
              commands:
              - 'docker build -f Dockerfile -t ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:${!CODEBUILD_BUILD_ID#*:} .'
            post_build:
              commands:
              - 'eval $(aws ecr get-login) && docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:${!CODEBUILD_BUILD_ID#*:}'
              - 'echo "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:${!CODEBUILD_BUILD_ID#*:}" > image.txt'
              - 'echo "{\"image\": \"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ArtifactsRepository}:${!CODEBUILD_BUILD_ID#*:}\"}" > image.json'
          artifacts:
            files:
            - 'app/**/*'
            - 'image.json'
            - 'image.txt'
      TimeoutInMinutes: 10


  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Name: !Ref 'AWS::StackName'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt 'PipelineRole.Arn'
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: [] 
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            OAuthToken: !Ref GitHubToken
          OutputArtifacts:
            - Name: Source
          RunOrder: 1
      
      - Name: Pipeline
        Actions:
        - Name: DeployPipeline
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: 1
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_IAM
            RoleArn: !GetAtt 'CloudFormationRole.Arn'
            StackName: !Ref 'AWS::StackName'
            TemplatePath: 'Source::deploy/pipeline.yml'
            ParameterOverrides: !Sub '{"RepositoryName": "${GitHubRepo}", "BranchName": "${GitHubBranch}"}'
          InputArtifacts:
          - Name: Source
          RunOrder: 1
      
      - Name: Build
        Actions:
        - Name: BuildAndTestApp
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Ref AppProject
          InputArtifacts:
          - Name: Source
          OutputArtifacts:
          - Name: App
          RunOrder: 1


        # - Name: BuildAndTestAcceptance
        #   ActionTypeId:
        #     Category: Build
        #     Owner: AWS
        #     Provider: CodeBuild
        #     Version: 1
        #   Configuration:
        #     ProjectName: !Ref AcceptanceProject
        #   InputArtifacts:
        #   - Name: Source
        #   OutputArtifacts:
        #   - Name: Acceptance
        #   RunOrder: 1

        - Name: BuildImage
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Ref ImageProject
          InputArtifacts:
          - Name: App
          OutputArtifacts:
          - Name: Image
          RunOrder: 2